---
import Document from '../../layouts/document.astro';

import SEO from "components/seo/seo.astro";
import BlogPostLayout from 'components/blog-post-layout/blog-post-layout.astro';
import PostTitleHeader from 'src/page-components/blog-post/post-title-header/post-title-header.astro';
import PostMetadata from 'src/page-components/blog-post/post-metadata/post-metadata.astro';
import TabsScript from 'src/page-components/blog-post/tabs-script/tabs-script.astro';
import SuggestedArticles from 'src/page-components/blog-post/suggested-articles/suggested-articles.astro';

import type { MarkdownInstance } from 'astro';
import {PostInfo} from 'types/PostInfo';
import { Languages } from 'types/index';

export async function getStaticPaths() {
  const posts = await Astro.glob<PostInfo>('../../../content/blog/**/*.md')

  return posts.map(post => {
    return {
      params: {
        // TODO: Pass locale
        postid: post.frontmatter.slug
      },
      props: {
        Content: post.Content,
        post: post.frontmatter
      }
    }
  })
}

const { Content, post } = Astro.props as {
  post: PostInfo,
  Content: MarkdownInstance<any>['Content']
}

const translations = post?.translations || [];

const otherLangs = translations
      ? (Object.keys(translations).filter(
          (t) => t !== post.locale
        ) as Languages[])
      : [];
---

<Document>
  <TabsScript/>
  <!-- TODO: Add this -->
  <!-- pathName={router.asPath} -->
  <SEO
    title={post.title}
    description={post.description || post.excerpt}
    unicornsData={post.authors}
    publishedTime={post.published}
    editedTime={post.edited}
    keywords={post.tags}
    type="article"
    canonical={post.originalLink}
    langData={{
      otherLangs,
      currentLang: post.locale,
    }}
    shareImage={`/${post.slug}.twitter-preview.png`}
  />
  <article>
    <BlogPostLayout>
      <div slot="left">Table of contents</div>
      <div slot="right">
        <SuggestedArticles suggestedArticles={post.suggestedArticles} lang={"en"} />
      </div>
      <header role="banner" class="marginZeroAutoChild">
        <PostTitleHeader post={post} />
        <PostMetadata post={post} />
      </header>
      <main class="post-body" data-testid={"post-body-div"}>
        <!-- {post.series ? (
          <SeriesToC
            post={post}
            postSeries={seriesPosts}
            collectionSlug={post.collectionSlug}
          />
        ) : null}
        {post.translations && Object.keys(post.translations).length ? (
          <TranslationsHeader post={post} />
        ) : null} -->
        <Content/>
        <!-- {post.series ? (
          <SeriesNav post={post} postSeries={seriesPosts} />
        ) : null} -->
      </main>
    </BlogPostLayout>
  </article>
</Document>