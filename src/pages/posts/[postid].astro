---
import { objectMap } from "ts-util-helpers";
import { languages } from "constants/index";
import { Languages } from "types/index";
import {
  postBySlug,
  seriesPostsPick,
} from "constants/queries";
import { getPostBySlug, getAllPosts, postsDirectory } from "utils/fs/api";
import markdownToHtml from "utils/markdown/markdownToHtml";
import * as path from 'path';

import "../../global.scss";

// import {COLORS} from 'constants/theme';

// const CSS_THEME = Object.entries(COLORS).reduce((prev, test) => {
//   prev += `\n--${test[0]}: ${test[1]};`;
//   return prev;
// }, "");

const rawStylesCSS = `
  :root {
    ${"TEST"}
  }
`

import {PostBody} from '../../components/PostBody.tsx';

export function getStaticPaths() {
  const postsLangArr = objectMap(languages, (_, lang) => {
    return getAllPosts({ slug: true }, lang);
  });

  const paths = (Object.keys(postsLangArr) as Array<Languages>)
    .map((lang) =>
      postsLangArr[lang].map((post) => {
        return {
          params: {
            postid: post.slug,
          }
        };
      })
    )
    .flat();

  return paths;
}

const { postid } = Astro.params;

const slugParam = postid;
const lang = "en";
const post = getPostBySlug(slugParam, lang, postBySlug);

const isStr = (val: any): val is string => typeof val === "string";
const slug = isStr(post.slug) ? post.slug : "";

const { html: markdownHTML, headingsWithId } = await markdownToHtml(
	post.content,
	path.resolve(postsDirectory, post.slug)
);

---

<html lang="en">
  <head>
  </head>
	<body>
    <article>
      <main class="post-body">
        <PostBody client:load markdownHTML={markdownHTML} slug={post.slug}/>
      </main>
    </article>
	</body>
</html>
